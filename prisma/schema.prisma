datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  roleId        Int?      @map("role_id")
  currentTeamId Int?      @map("current_team_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  accounts      Account[]
  sessions      Session[]

  role     Role?      @relation(fields: [roleId], references: [id], onDelete: SetNull)
  team     Team[]
  teamUser TeamUser[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  ownerId   String?  @map("owner_id")
  createdAt DateTime @default(now()) @map("created_at")

  owner          User?            @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  teamUser       TeamUser[]
  roleId         Int?
  role           Role[]
  permission     Permission[]
  rolePermission RolePermission[]

  @@map("teams")
}

model TeamUser {
  id        Int      @id @default(autoincrement())
  teamId    Int      @map("team_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("team_users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  teamId      Int      @map("team_id")
  createdAt   DateTime @default(now()) @map("created_at")

  rolePermissions RolePermission[]
  User            User[]

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  teamId      Int      @map("team_id")
  createdAt   DateTime @default(now()) @map("created_at")

  rolePermissions RolePermission[]
  team            Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("permissions")
}

model RolePermission {
  id           Int      @id @default(autoincrement())
  roleId       Int      @map("role_id")
  permissionId Int      @map("permission_id")
  teamId       Int      @map("team_id")
  createdAt    DateTime @default(now()) @map("created_at")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  team       Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("role_permissions")
}
